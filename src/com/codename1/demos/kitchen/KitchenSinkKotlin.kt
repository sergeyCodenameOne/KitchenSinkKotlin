package com.codename1.demos.kitchen

import com.codename1.io.Log
import com.codename1.io.NetworkEvent
import com.codename1.ui.*
import com.codename1.ui.events.ActionEvent
import com.codename1.ui.plaf.RoundRectBorder
import com.codename1.ui.plaf.Style
import com.codename1.ui.plaf.UIManager
import com.codename1.ui.util.Resources
import java.io.IOException
import java.util.*

/**
 * This file was generated by [Codename One](https://www.codenameone.com/) for the purpose
 * of building native mobile applications using Java.
 */
open class KitchenSinkKotlin {
    private var current: Form? = null
    private var theme: Resources? = null
    private var darkMode = false
    private var darkModeCommand: Command? = null
    private var darkModeImageDark: Image? = null
    private var darkModeImageLight: Image? = null

    fun init(context: Any?) {
        // use two network threads instead of one
        CN.updateNetworkThreadCount(2)

        try {
            theme = Resources.openLayered("/theme")
            setPopupDialogBorder(theme!!.getTheme(theme!!.themeResourceNames[0]))
            UIManager.getInstance().setThemeProps(theme!!.getTheme(theme!!.themeResourceNames[0]))
            Resources.setGlobalResources(theme)
        } catch (e: IOException) {
            Log.e(e)
        }

        darkModeImageLight = FontImage.createMaterial(FontImage.MATERIAL_BRIGHTNESS_MEDIUM, UIManager.getInstance().getComponentStyle("DemoTitleCommand"))
        darkModeImageDark = FontImage.createMaterial(FontImage.MATERIAL_BRIGHTNESS_MEDIUM, UIManager.getInstance().getComponentStyle("DemoTitleCommandDark"))

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true)

        // Pro only feature
        Log.bindCrashProtection(true)
        Button.setButtonRippleEffectDefault(false)
        CN.addNetworkErrorListener { err: NetworkEvent ->
            // prevent the event from propagating
            err.consume()
            if (err.error != null) {
                Log.e(err.error)
            }
            Log.sendLogAsync()
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.connectionRequest.url, "OK", null)
        }
    }

    fun start() {
        if (current != null) {
            current!!.show()
            return
        }

        val mainForm = MainWindow().buildForm()
        darkModeCommand = mainForm.toolbar.addCommandToRightBar("",
                darkModeImageLight) { e: ActionEvent? -> initTheme() }

        mainForm.show()
    }

    fun stop() {
        current = CN.getCurrentForm()
        if (current is Dialog) {
            (current as Dialog).dispose()
            current = CN.getCurrentForm()
        }
    }

    fun destroy() {}

    private fun initTheme() {
        darkMode = !darkMode
        val themeFileName = if (darkMode) "/dark-theme" else "/theme"

        try {
            val theme = Resources.openLayered(themeFileName)
            UIManager.getInstance().addThemeProps(theme.getTheme(theme.themeResourceNames[0]))
        } catch (e: IOException) {
            Log.e(e)
        }

        val darkModeCmd = Display.getInstance().current.toolbar.findCommandComponent(darkModeCommand)
        if (darkMode) {
            darkModeCmd.icon = darkModeImageDark
        } else {
            darkModeCmd.icon = darkModeImageLight
        }
        ClockDemo.refreshClockColor()
        Display.getInstance().current.refreshTheme()
    }

    private fun setPopupDialogBorder(themeProps: Hashtable<Any, Any>) {
        themeProps["PopupDialog.derive"] = "Dialog"
        themeProps["PopupDialog.border"] = RoundRectBorder.create().cornerRadius(2f).shadowOpacity(60).shadowSpread(3.0f)
        themeProps["PopupDialog.transparency"] = "255"
        themeProps["PopupDialog.padding"] = "4,4,4,4"
        themeProps["PopupDialog.padUnit"] = byteArrayOf(Style.UNIT_TYPE_DIPS, Style.UNIT_TYPE_DIPS, Style.UNIT_TYPE_DIPS, Style.UNIT_TYPE_DIPS)
    }
}